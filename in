#!/bin/bash

set -eo pipefail

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

destination=$1

payload=$(mktemp "${TMPDIR}/resource-check.XXXXXX")
cat > "${payload}" <&0

version=$(jq -r '.version.version // empty' < "${payload}")
if [[ -z ${version} ]]; then
    >&2 echo "Version info 'version' is missing"
    exit 1
fi

source_project=$(jq -r '.source.project // empty' < "${payload}")
if [[ -z ${source_project} ]]; then
    >&2 echo "Source parameter 'project' is missing"
    exit 1
fi

params_regexp=$(jq -r '.params.regexp // empty' < "${payload}")

curl --silent --fail --show-error --location --output /dev/null \
        --url "https://releases.hashicorp.com/${source_project}/index.json" || (
    >&2 echo "Unknown hashicorp project '${source_project}'"
    exit 1
)

>&2 echo "Fetching assets ${source_project} v${version}"
cd "${destination}"
echo "${version}" > version
echo "${source_project}" > project

build_urls=$(
    curl --silent --fail --show-error --location \
            --url "https://releases.hashicorp.com/${source_project}/index.json" \
        | jq -r ".versions[\"${version}\"].builds[].url"
)
if [[ -n "${params_regexp}" ]]; then
    set +e
    build_urls=$(grep "${params_regexp}" <<< "${build_urls}")
    set -e
fi
if [[ -z "${build_urls}" ]]; then
    >&2 echo "Regexp '${params_regexp}' did not match any build URLs"
    exit 1
fi
for url in ${build_urls}; do
    >&2 echo "Downloading ${url}"
    curl --silent --fail --show-error --location --remote-name \
        --url "${url}"
done

jq --null-input --arg version "${version}" '{ version: { version: $version } }' >&3
